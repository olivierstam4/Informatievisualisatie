Traceback (most recent call last):
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/home/olivier/miniconda3/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
originaldf = pd.read_csv('water_original.csv')
for i in originaldf.columns:
#     print(i, originaldf.iloc[1])
#  gives 
# NATIONAL                                             At least basic
    # Unnamed: 6                              Limited (more than 30 mins)
    # Unnamed: 7                                               Unimproved
    # Unnamed: 8                                            Surface water
    # Unnamed: 9                           Annual rate of change in basic
    # RURAL                                                At least basic
    #      Now we can 'manually' change the attribute names like this:
    # originaldf = originaldf.rename(columns={'Unnamed: 6': 'NATIONAL-Basic'})
    # and so on 


#df['NATIONAL-Basic'] = df['NATIONAL-Basic'].replace('>99', 99)
# the same with <1 to 1.0

# Missing data in this dataset has been indicated by '-' in order to make this NaN we used this line:
# df['National-Basic'].replace('-', float('nan'), inplace=True)
------------------


[0;36m  Cell [0;32mIn[1], line 21[0;36m[0m
[0;31m    # df['National-Basic'].replace('-', float('nan'), inplace=True)[0m
[0m                                                                   ^[0m
[0;31mSyntaxError[0m[0;31m:[0m incomplete input



Traceback (most recent call last):
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/home/olivier/miniconda3/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/olivier/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import plotly.graph_objects as go
import statsmodels.api as sm

df_green = pd.read_csv('datasets/iso_green.csv')

def filter_outliers(data, threshold=2):
    z_scores = np.abs((data - np.mean(data)) / np.std(data))
    filtered_data = data[z_scores < threshold]
    return filtered_data

filtered_technologies = filter_outliers(df_green['Development of environment-related technologies, % inventions worldwide'])
filtered_emissions = filter_outliers(df_green['Demand-based CO2 emissions'])
filtered_years = df_green.loc[filtered_technologies.index, 'Year']

filtered_df = pd.DataFrame({'Year': filtered_years, 'Technologies': filtered_technologies, 'Emissions': filtered_emissions})

filtered_df = filtered_df.dropna()

avg_technologies = filtered_df.groupby('Year')['Technologies'].mean().values
avg_emissions = filtered_df.groupby('Year')['Emissions'].mean().values
filtered_years = filtered_df['Year'].unique()

averages_df = pd.DataFrame({'Year': filtered_years, 'Avg Technologies': avg_technologies, 'Avg Emissions': avg_emissions})

X = sm.add_constant(avg_technologies)  
model = sm.OLS(avg_emissions, X)
results = model.fit()
reg_line = results.predict(X)

fig3dreg = go.Figure()

for year, tech, emiss in zip(filtered_years, avg_technologies, avg_emissions):
    fig3dreg.add_annotation(
        x=tech,
        y=emiss,
        text=str(int(year)),  
        showarrow=False,
        font=dict(size=12),
        xshift=5,
        yshift=-10
    )

fig3dreg.add_trace(go.Scatter(
    x=avg_technologies,
    y=avg_emissions,
    mode='markers',
    marker=dict(color='rgb(31, 119, 180)'),
    name='Data per year'
))

fig3dreg.add_trace(go.Scatter(
    x=avg_technologies,
    y=reg_line,
    mode='lines',
    line=dict(color='red'),
    name='Regression Line'
))

fig3dreg.update_layout(
    xaxis_title='Average Development (environment related) technologies',
    yaxis_title='Average Carbon emissions',
    title='Regression line of the Average carbon emissions and development in environmental technologies per year',
    height=600, width=1200
)
fig3dreg.add_annotation(
    text='Fig 9: Regressional line of the Average Carbon emission data per year compared to the Average Development in environmental related technologies per year',
    xref="paper",
    yref="paper",
    x=0.5,
    y=-0.15,
    showarrow=False,
    font=dict(size=12)
)

%store fig3dreg
fig3dreg.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[2], line 2[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mplotly[39;00m[38;5;21;01m.[39;00m[38;5;21;01mgraph_objects[39;00m [38;5;28;01mas[39;00m [38;5;21;01mgo[39;00m
[0;32m----> 2[0m [38;5;28;01mimport[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mapi[39;00m [38;5;28;01mas[39;00m [38;5;21;01msm[39;00m
[1;32m      4[0m df_green [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mdatasets/iso_green.csv[39m[38;5;124m'[39m)
[1;32m      6[0m [38;5;28;01mdef[39;00m [38;5;21mfilter_outliers[39m(data, threshold[38;5;241m=[39m[38;5;241m2[39m):

File [0;32m~/.local/lib/python3.10/site-packages/statsmodels/__init__.py:1[0m
[0;32m----> 1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mcompat[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpatsy[39;00m [38;5;28;01mimport[39;00m monkey_patch_cat_dtype
[1;32m      3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01m_version[39;00m [38;5;28;01mimport[39;00m __version__, __version_tuple__
[1;32m      5[0m __version_info__ [38;5;241m=[39m __version_tuple__

File [0;32m~/.local/lib/python3.10/site-packages/statsmodels/compat/__init__.py:1[0m
[0;32m----> 1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mtools[39;00m[38;5;21;01m.[39;00m[38;5;21;01m_testing[39;00m [38;5;28;01mimport[39;00m PytestTester
[1;32m      3[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01mpython[39;00m [38;5;28;01mimport[39;00m (
[1;32m      4[0m     PY37,
[1;32m      5[0m     asunicode,
[0;32m   (...)[0m
[1;32m     11[0m     lfilter,
[1;32m     12[0m )
[1;32m     14[0m __all__ [38;5;241m=[39m [
[1;32m     15[0m     [38;5;124m"[39m[38;5;124mPY37[39m[38;5;124m"[39m,
[1;32m     16[0m     [38;5;124m"[39m[38;5;124masunicode[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m     23[0m     [38;5;124m"[39m[38;5;124mtest[39m[38;5;124m"[39m,
[1;32m     24[0m ]

File [0;32m~/.local/lib/python3.10/site-packages/statsmodels/tools/__init__.py:1[0m
[0;32m----> 1[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01mtools[39;00m [38;5;28;01mimport[39;00m add_constant, categorical
[1;32m      2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mtools[39;00m[38;5;21;01m.[39;00m[38;5;21;01m_testing[39;00m [38;5;28;01mimport[39;00m PytestTester
[1;32m      4[0m __all__ [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mtest[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124madd_constant[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mcategorical[39m[38;5;124m'[39m]

File [0;32m~/.local/lib/python3.10/site-packages/statsmodels/tools/tools.py:6[0m
[1;32m      4[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m      5[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[0;32m----> 6[0m [38;5;28;01mimport[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mlinalg[39;00m
[1;32m      8[0m [38;5;28;01mfrom[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mtools[39;00m[38;5;21;01m.[39;00m[38;5;21;01mdata[39;00m [38;5;28;01mimport[39;00m _is_using_pandas
[1;32m      9[0m [38;5;28;01mfrom[39;00m [38;5;21;01mstatsmodels[39;00m[38;5;21;01m.[39;00m[38;5;21;01mtools[39;00m[38;5;21;01m.[39;00m[38;5;21;01mvalidation[39;00m [38;5;28;01mimport[39;00m array_like

[0;31mModuleNotFoundError[0m: No module named 'scipy'

